// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: reviews.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (product_id, user_id, rating, comment, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING review_id, product_id, user_id, rating, comment, created_at, updated_at
`

type CreateReviewParams struct {
	ProductID int32          `json:"product_id"`
	UserID    int32          `json:"user_id"`
	Rating    int32          `json:"rating"`
	Comment   sql.NullString `json:"comment"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.ProductID,
		arg.UserID,
		arg.Rating,
		arg.Comment,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.ProductID,
		&i.UserID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews WHERE review_id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, reviewID int32) error {
	_, err := q.db.ExecContext(ctx, deleteReview, reviewID)
	return err
}

const getReview = `-- name: GetReview :one
SELECT review_id, product_id, user_id, rating, comment, created_at, updated_at
FROM reviews
WHERE review_id = $1
LIMIT 1
`

func (q *Queries) GetReview(ctx context.Context, reviewID int32) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, reviewID)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.ProductID,
		&i.UserID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listReviews = `-- name: ListReviews :many
SELECT review_id, product_id, user_id, rating, comment, created_at, updated_at
FROM reviews
ORDER BY review_id
LIMIT $1
    OFFSET $2
`

type ListReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReviews(ctx context.Context, arg ListReviewsParams) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ReviewID,
			&i.ProductID,
			&i.UserID,
			&i.Rating,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews
SET product_id = $1, user_id = $2, rating = $3, comment = $4, updated_at = $5
WHERE review_id = $6
RETURNING review_id, product_id, user_id, rating, comment, created_at, updated_at
`

type UpdateReviewParams struct {
	ProductID int32          `json:"product_id"`
	UserID    int32          `json:"user_id"`
	Rating    int32          `json:"rating"`
	Comment   sql.NullString `json:"comment"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	ReviewID  int32          `json:"review_id"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, updateReview,
		arg.ProductID,
		arg.UserID,
		arg.Rating,
		arg.Comment,
		arg.UpdatedAt,
		arg.ReviewID,
	)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.ProductID,
		&i.UserID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
