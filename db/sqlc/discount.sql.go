// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: discount.sql

package db

import (
	"context"
	"database/sql"
)

const createDiscount = `-- name: CreateDiscount :one
INSERT INTO discounts (product_id, discount_percentage, created_at, updated_at)
VALUES ($1, $2, $3, $4)
RETURNING discount_id, product_id, discount_percentage, created_at, updated_at
`

type CreateDiscountParams struct {
	ProductID          sql.NullInt32  `json:"product_id"`
	DiscountPercentage sql.NullString `json:"discount_percentage"`
	CreatedAt          sql.NullTime   `json:"created_at"`
	UpdatedAt          sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateDiscount(ctx context.Context, arg CreateDiscountParams) (Discount, error) {
	row := q.db.QueryRowContext(ctx, createDiscount,
		arg.ProductID,
		arg.DiscountPercentage,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Discount
	err := row.Scan(
		&i.DiscountID,
		&i.ProductID,
		&i.DiscountPercentage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDiscount = `-- name: DeleteDiscount :exec
DELETE FROM discounts WHERE discount_id = $1
`

func (q *Queries) DeleteDiscount(ctx context.Context, discountID int32) error {
	_, err := q.db.ExecContext(ctx, deleteDiscount, discountID)
	return err
}

const getDiscount = `-- name: GetDiscount :one
SELECT discount_id, product_id, discount_percentage, created_at, updated_at
FROM discounts
WHERE discount_id = $1
LIMIT 1
`

func (q *Queries) GetDiscount(ctx context.Context, discountID int32) (Discount, error) {
	row := q.db.QueryRowContext(ctx, getDiscount, discountID)
	var i Discount
	err := row.Scan(
		&i.DiscountID,
		&i.ProductID,
		&i.DiscountPercentage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDiscounts = `-- name: ListDiscounts :many
SELECT discount_id, product_id, discount_percentage, created_at, updated_at
FROM discounts
ORDER BY discount_id
LIMIT $1
    OFFSET $2
`

type ListDiscountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDiscounts(ctx context.Context, arg ListDiscountsParams) ([]Discount, error) {
	rows, err := q.db.QueryContext(ctx, listDiscounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Discount
	for rows.Next() {
		var i Discount
		if err := rows.Scan(
			&i.DiscountID,
			&i.ProductID,
			&i.DiscountPercentage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiscount = `-- name: UpdateDiscount :one
UPDATE discounts
SET product_id = $1, discount_percentage = $2, updated_at = $3
WHERE discount_id = $4
RETURNING discount_id, product_id, discount_percentage, created_at, updated_at
`

type UpdateDiscountParams struct {
	ProductID          sql.NullInt32  `json:"product_id"`
	DiscountPercentage sql.NullString `json:"discount_percentage"`
	UpdatedAt          sql.NullTime   `json:"updated_at"`
	DiscountID         int32          `json:"discount_id"`
}

func (q *Queries) UpdateDiscount(ctx context.Context, arg UpdateDiscountParams) (Discount, error) {
	row := q.db.QueryRowContext(ctx, updateDiscount,
		arg.ProductID,
		arg.DiscountPercentage,
		arg.UpdatedAt,
		arg.DiscountID,
	)
	var i Discount
	err := row.Scan(
		&i.DiscountID,
		&i.ProductID,
		&i.DiscountPercentage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
