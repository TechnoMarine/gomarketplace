// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: order-detail.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createOrderDetail = `-- name: CreateOrderDetail :one
INSERT INTO order_details (order_id, product_id, quantity, total_amount, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING detail_id, order_id, product_id, quantity, total_amount, created_at, updated_at
`

type CreateOrderDetailParams struct {
	OrderID     int32        `json:"order_id"`
	ProductID   int32        `json:"product_id"`
	Quantity    int32        `json:"quantity"`
	TotalAmount string       `json:"total_amount"`
	CreatedAt   time.Time    `json:"created_at"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, createOrderDetail,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.TotalAmount,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i OrderDetail
	err := row.Scan(
		&i.DetailID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.TotalAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderDetail = `-- name: DeleteOrderDetail :exec
DELETE FROM order_details WHERE detail_id = $1
`

func (q *Queries) DeleteOrderDetail(ctx context.Context, detailID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderDetail, detailID)
	return err
}

const getOrderDetail = `-- name: GetOrderDetail :one
SELECT detail_id, order_id, product_id, quantity, total_amount, created_at, updated_at
FROM order_details
WHERE detail_id = $1
LIMIT 1
`

func (q *Queries) GetOrderDetail(ctx context.Context, detailID int32) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, getOrderDetail, detailID)
	var i OrderDetail
	err := row.Scan(
		&i.DetailID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.TotalAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrderDetails = `-- name: ListOrderDetails :many
SELECT detail_id, order_id, product_id, quantity, total_amount, created_at, updated_at
FROM order_details
ORDER BY detail_id
LIMIT $1
    OFFSET $2
`

type ListOrderDetailsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderDetails(ctx context.Context, arg ListOrderDetailsParams) ([]OrderDetail, error) {
	rows, err := q.db.QueryContext(ctx, listOrderDetails, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderDetail
	for rows.Next() {
		var i OrderDetail
		if err := rows.Scan(
			&i.DetailID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.TotalAmount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderDetail = `-- name: UpdateOrderDetail :one
UPDATE order_details
SET order_id = $1, product_id = $2, quantity = $3, total_amount = $4, updated_at = $5
WHERE detail_id = $6
RETURNING detail_id, order_id, product_id, quantity, total_amount, created_at, updated_at
`

type UpdateOrderDetailParams struct {
	OrderID     int32        `json:"order_id"`
	ProductID   int32        `json:"product_id"`
	Quantity    int32        `json:"quantity"`
	TotalAmount string       `json:"total_amount"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
	DetailID    int32        `json:"detail_id"`
}

func (q *Queries) UpdateOrderDetail(ctx context.Context, arg UpdateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, updateOrderDetail,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.TotalAmount,
		arg.UpdatedAt,
		arg.DetailID,
	)
	var i OrderDetail
	err := row.Scan(
		&i.DetailID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.TotalAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
