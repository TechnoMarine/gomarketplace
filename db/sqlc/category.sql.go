// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: category.sql

package db

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (category_name, parent_id, created_at, updated_at)
VALUES ($1, $2, $3, $4)
RETURNING category_id, category_name, parent_id, created_at, updated_at
`

type CreateCategoryParams struct {
	CategoryName sql.NullString `json:"category_name"`
	ParentID     sql.NullInt32  `json:"parent_id"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.CategoryName,
		arg.ParentID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE category_id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, categoryID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, categoryID)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT category_id, category_name, parent_id, created_at, updated_at
FROM categories
WHERE category_id = $1
LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, categoryID int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT category_id, category_name, parent_id, created_at, updated_at
FROM categories
ORDER BY category_id
LIMIT $1
    OFFSET $2
`

type ListCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.ParentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET category_name = $1, parent_id = $2, updated_at = $3
WHERE category_id = $4
RETURNING category_id, category_name, parent_id, created_at, updated_at
`

type UpdateCategoryParams struct {
	CategoryName sql.NullString `json:"category_name"`
	ParentID     sql.NullInt32  `json:"parent_id"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
	CategoryID   int32          `json:"category_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.CategoryName,
		arg.ParentID,
		arg.UpdatedAt,
		arg.CategoryID,
	)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
