// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: shopping_cart.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createShoppingCart = `-- name: CreateShoppingCart :one
INSERT INTO shopping_cart (user_id, product_id, quantity, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING cart_id, user_id, product_id, quantity, created_at, updated_at
`

type CreateShoppingCartParams struct {
	UserID    int32        `json:"user_id"`
	ProductID int32        `json:"product_id"`
	Quantity  int32        `json:"quantity"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) CreateShoppingCart(ctx context.Context, arg CreateShoppingCartParams) (ShoppingCart, error) {
	row := q.db.QueryRowContext(ctx, createShoppingCart,
		arg.UserID,
		arg.ProductID,
		arg.Quantity,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ShoppingCart
	err := row.Scan(
		&i.CartID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShoppingCart = `-- name: DeleteShoppingCart :exec
DELETE FROM shopping_cart WHERE cart_id = $1
`

func (q *Queries) DeleteShoppingCart(ctx context.Context, cartID int32) error {
	_, err := q.db.ExecContext(ctx, deleteShoppingCart, cartID)
	return err
}

const getShoppingCart = `-- name: GetShoppingCart :one
SELECT cart_id, user_id, product_id, quantity, created_at, updated_at
FROM shopping_cart
WHERE cart_id = $1
LIMIT 1
`

func (q *Queries) GetShoppingCart(ctx context.Context, cartID int32) (ShoppingCart, error) {
	row := q.db.QueryRowContext(ctx, getShoppingCart, cartID)
	var i ShoppingCart
	err := row.Scan(
		&i.CartID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listShoppingCarts = `-- name: ListShoppingCarts :many
SELECT cart_id, user_id, product_id, quantity, created_at, updated_at
FROM shopping_cart
ORDER BY cart_id
LIMIT $1
    OFFSET $2
`

type ListShoppingCartsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShoppingCarts(ctx context.Context, arg ListShoppingCartsParams) ([]ShoppingCart, error) {
	rows, err := q.db.QueryContext(ctx, listShoppingCarts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShoppingCart
	for rows.Next() {
		var i ShoppingCart
		if err := rows.Scan(
			&i.CartID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShoppingCart = `-- name: UpdateShoppingCart :one
UPDATE shopping_cart
SET user_id = $1, product_id = $2, quantity = $3, updated_at = $4
WHERE cart_id = $5
RETURNING cart_id, user_id, product_id, quantity, created_at, updated_at
`

type UpdateShoppingCartParams struct {
	UserID    int32        `json:"user_id"`
	ProductID int32        `json:"product_id"`
	Quantity  int32        `json:"quantity"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	CartID    int32        `json:"cart_id"`
}

func (q *Queries) UpdateShoppingCart(ctx context.Context, arg UpdateShoppingCartParams) (ShoppingCart, error) {
	row := q.db.QueryRowContext(ctx, updateShoppingCart,
		arg.UserID,
		arg.ProductID,
		arg.Quantity,
		arg.UpdatedAt,
		arg.CartID,
	)
	var i ShoppingCart
	err := row.Scan(
		&i.CartID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
